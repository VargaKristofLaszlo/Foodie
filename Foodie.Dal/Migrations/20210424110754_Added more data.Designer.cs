// <auto-generated />
using System;
using Foodie.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Foodie.Dal.Migrations
{
    [DbContext(typeof(FoodieDbContext))]
    [Migration("20210424110754_Added more data")]
    partial class Addedmoredata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Foodie.Dal.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("CookingTime")
                        .HasColumnType("time");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("PreparationTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 225,
                            CookingTime = new TimeSpan(0, 0, 36, 0, 0),
                            Instruction = "In a large pot, heat olive oil and sauté the onions for 5 minutes. Add garlic and continue cooking for 1 more minute.;Add all the remaining ingredients, using 3 cups of chicken stock (except the lime juice) to the pot.;Bring to a simmer and allow to cook for 30 minutes, until the chicken is cooked through.;Stir in lime juice and serve with avocado and cilantro.",
                            Name = "Green Chicken Chili Soup",
                            PreparationTime = new TimeSpan(0, 0, 15, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Category = 33,
                            CookingTime = new TimeSpan(0, 0, 25, 0, 0),
                            Instruction = "Sauté onions and peppers in olive oil over medium heat. Sauté until onions are just tender. Add garlic and cook for 2 more minutes. Add tomatoes, curry paste, chicken stock and chickpeas and bring to rapid simmer. Stir until paste is dissolved. Add coconut milk, fish sauce and lime juice, bring back to a simmer and allow to cook for 10 minutes.;Add chicken and cook for 10 minutes at a simmer until chicken is cooked through. Season with salt and add kale/spinach. Cook for 3 more minutes and serve as is or over cauliflower rice.;You may need to adjust the seasonings just a bit. Use less curry paste if you don't like it with a little “kick”.",
                            Name = "Coconut Curry Soup with Chicken, Chickpeas and Hearty Greens",
                            PreparationTime = new TimeSpan(0, 0, 10, 0, 0)
                        });
                });

            modelBuilder.Entity("Foodie.Dal.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Foodie.Dal.Entities.UserRecipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRecipes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Foodie.Dal.Entities.Recipe", b =>
                {
                    b.OwnsMany("Foodie.Dal.Entities.Ingredient", "Ingredients", b1 =>
                        {
                            b1.Property<int>("RecipeId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double?>("Amount")
                                .HasColumnType("float");

                            b1.Property<int>("Measurement")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RecipeId", "Id");

                            b1.ToTable("Ingredient");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");

                            b1.HasData(
                                new
                                {
                                    RecipeId = 1,
                                    Id = 1,
                                    Amount = 2.0,
                                    Measurement = 3,
                                    Name = "Olive oil"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 2,
                                    Amount = 1.0,
                                    Measurement = 0,
                                    Name = "Onion"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 3,
                                    Amount = 4.0,
                                    Measurement = 0,
                                    Name = "Garlic cloves"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 4,
                                    Amount = 2.0,
                                    Measurement = 5,
                                    Name = "Chicken stock"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 5,
                                    Amount = 1.0,
                                    Measurement = 9,
                                    Name = "White beans"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 6,
                                    Amount = 1.0,
                                    Measurement = 9,
                                    Name = "Salsa verde"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 7,
                                    Amount = 1.0,
                                    Measurement = 9,
                                    Name = "Green chilis"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 8,
                                    Amount = 1.0,
                                    Measurement = 0,
                                    Name = "Green bell pepper"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 9,
                                    Amount = 1.0,
                                    Measurement = 0,
                                    Name = "Jalapeno"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 10,
                                    Amount = 0.68000000000000005,
                                    Measurement = 11,
                                    Name = "Chicken breast"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 11,
                                    Amount = 1.0,
                                    Measurement = 1,
                                    Name = "Cumin"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 12,
                                    Amount = 1.0,
                                    Measurement = 1,
                                    Name = "Chili powder"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 13,
                                    Amount = 1.0,
                                    Measurement = 1,
                                    Name = "Salt"
                                },
                                new
                                {
                                    RecipeId = 1,
                                    Id = 14,
                                    Amount = 2.0,
                                    Measurement = 3,
                                    Name = "Lime juice"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 1,
                                    Amount = 1.0,
                                    Measurement = 3,
                                    Name = "Olive oil"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 2,
                                    Amount = 1.0,
                                    Measurement = 0,
                                    Name = "onion"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 3,
                                    Amount = 2.0,
                                    Measurement = 0,
                                    Name = "Red bell pepper"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 4,
                                    Amount = 4.0,
                                    Measurement = 0,
                                    Name = "Garlic cloves"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 5,
                                    Amount = 1.0,
                                    Measurement = 9,
                                    Name = "Diced Tomatoe"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 6,
                                    Amount = 1.0,
                                    Measurement = 9,
                                    Name = "Chickpea"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 7,
                                    Amount = 4.0,
                                    Measurement = 5,
                                    Name = "Chicken stock"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 8,
                                    Amount = 2.0,
                                    Measurement = 9,
                                    Name = "Full fat coconut milk"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 9,
                                    Amount = 2.0,
                                    Measurement = 3,
                                    Name = "Red curry paste"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 10,
                                    Amount = 2.0,
                                    Measurement = 1,
                                    Name = "Fish sauce"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 11,
                                    Measurement = 12,
                                    Name = "Lemon juice"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 12,
                                    Amount = 0.68000000000000005,
                                    Measurement = 11,
                                    Name = "Chicken breasts"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 13,
                                    Amount = 2.0,
                                    Measurement = 5,
                                    Name = "Kale"
                                },
                                new
                                {
                                    RecipeId = 2,
                                    Id = 14,
                                    Measurement = 12,
                                    Name = "Salt"
                                });
                        });
                });

            modelBuilder.Entity("Foodie.Dal.Entities.UserRecipe", b =>
                {
                    b.HasOne("Foodie.Dal.Entities.Recipe", "Recipe")
                        .WithMany("Users")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodie.Dal.Entities.User", "User")
                        .WithMany("FavouriteRecipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Foodie.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Foodie.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodie.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Foodie.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
